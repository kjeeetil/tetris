import re
import unittest
from html.parser import HTMLParser
from pathlib import Path


REPO_ROOT = Path(__file__).resolve().parents[1]
WEB_ROOT = REPO_ROOT / "web"


class AssetHTMLParser(HTMLParser):
    """Collects stylesheet/script references and class usage from HTML."""

    def __init__(self):
        super().__init__()
        self.stylesheets = []
        self.scripts = []
        self.classes = set()

    def handle_starttag(self, tag, attrs):
        attr_dict = dict(attrs)

        if tag == "link" and "rel" in attr_dict:
            rel_tokens = {token.lower() for token in attr_dict["rel"].split()}
            if "stylesheet" in rel_tokens and "href" in attr_dict:
                self.stylesheets.append(attr_dict["href"])

        if tag == "script" and "src" in attr_dict:
            self.scripts.append(attr_dict["src"])

        class_value = attr_dict.get("class")
        if class_value:
            for token in class_value.split():
                if token:
                    self.classes.add(token)


class StylingAssetsTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.index_path = WEB_ROOT / "index.html"
        cls.stylesheet_path = WEB_ROOT / "styles.css"

        parser = AssetHTMLParser()
        parser.feed(cls.index_path.read_text(encoding="utf-8"))
        cls.html_parser = parser

        css_text = cls.stylesheet_path.read_text(encoding="utf-8")
        class_pattern = re.compile(r"(?<![0-9])\\.([a-zA-Z_-][a-zA-Z0-9_-]*)")
        cls.defined_css_classes = set(class_pattern.findall(css_text))

        js_sources = []
        for js_file in (WEB_ROOT / "js").rglob("*.js"):
            js_sources.append(js_file.read_text(encoding="utf-8"))
        cls.js_source_text = "\n".join(js_sources)

    def test_index_includes_core_stylesheets(self):
        parser = self.html_parser
        with self.subTest("local styles.css referenced"):
            self.assertIn("./styles.css", parser.stylesheets)

        with self.subTest("choices CDN stylesheet referenced"):
            self.assertIn(
                "https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css",
                parser.stylesheets,
            )

        with self.subTest("tailwind CDN script referenced"):
            self.assertIn("https://cdn.tailwindcss.com", parser.scripts)

        with self.subTest("local tailwind config referenced"):
            self.assertIn("./tailwind-config.js", parser.scripts)

    def test_defined_css_classes_are_used(self):
        parser = self.html_parser
        html_classes = parser.classes
        js_text = self.js_source_text

        dynamic_prefixes = ("choices", "is-")
        unused_classes = []

        for css_class in sorted(self.defined_css_classes):
            if css_class.startswith(dynamic_prefixes):
                # Skip classes generated by third-party widgets or dynamic state toggles.
                continue

            if css_class in html_classes:
                continue

            pattern = re.compile(rf"[\"']{re.escape(css_class)}[\"']")
            if pattern.search(js_text):
                continue

            unused_classes.append(css_class)

        self.assertListEqual(unused_classes, [], f"CSS classes without usage: {unused_classes}")


if __name__ == "__main__":
    unittest.main()
